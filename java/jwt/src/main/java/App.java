import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.Verification;

import java.security.*;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Date;

import static java.lang.System.out;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {



        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(1024);
        KeyPair keyPair = keyGen.generateKeyPair();
        out.println("------------PUBLIC KEY------------");
        out.println(Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()));
        out.println("------------PRIVATE KEY------------");
        out.println(Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded()));

        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();

        Algorithm encoder = Algorithm.RSA512(privateKey);
        String token = JWT.create()
                .withSubject("123")
                .withIssuedAt(new Date())
                .sign(encoder);

        out.println("---------------TOKEN---------------");
        out.println(token);

        RSAPublicKey wrongPublicKey = (RSAPublicKey) keyGen.generateKeyPair().getPublic();
        Algorithm decoder = Algorithm.RSA512(publicKey);
        JWTVerifier verifier = JWT.require(decoder).build();
        verifier.verify(token);
    }
}
