input { 
  file { 
    path => "/input/*.log"
	 start_position => "beginning"
	 close_older => 1
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601} "
      negate => true
      what => previous
    }
  }
#  beats {
#    port => 5044
#    codec => multiline {
#      pattern => "^%{TIMESTAMP_ISO8601} "
#      negate => true
#      what => previous
#    }
#  }
} 

filter {
  dissect {
    mapping => {
	  "message" => "%{timestamp} %{+timestamp} %{debug_level} [%{threads}] %{source} - [%{?ip}:%{port}] %{content}"
	}
  }

  if [source] not in [ "HttpInterface", "HttpRequest" ] {
    drop {}
  }

  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
  }

  kv {
    source => "content"
	include_keys => [ "RequestId", "Method", "Uri", "StatusCode" ]
	field_split => " \[\]\r\n"
  }

  if [RequestId] {
    mutate {
	  add_tag => [ "request" ]
    }
  }

  if [Uri] {
    grok {
      match => {
        "Uri" => "%{URIPROTO}://%{URIHOST:servername}/%{WORD:type}/web(/%{WORD:api}%{URIPATHPARAM})?"
      }
      add_tag => [ "URI_parsed" ]
    }

	if [api] {
      mutate {
        add_tag => [ "got_api" ]
      }
    }
  }

  kv {
    source => "content"
	include_keys => [ "X-Forwarded-For", "X-dev", "X-Real-IP", "Content-Length", "Content-Type", "Accept", "Host", "Accept-Encoding", "User-Agent" ]
	field_split => " \n"
	value_split => ":"
	trim => "\r\n,;"
    add_tag => [ "got_headers" ]
  }

  if [path] {
	  grok {
		match => ["path","%{GREEDYDATA}/%{GREEDYDATA:[@metadata][filename]}\.log"]
	  }
  }

  if [X-Forwarded-For] {
    geoip {
	  source => "X-Forwarded-For"
	  target => "Forwarded-GeoIP"
	  fields => ["continent_code", "country_name", "city_name"]
	}
  }

  if ![StatusCode] {
    mutate {
	  add_field => { "StatusCode" => "Undefined" }
	}
  }

  mutate {
	remove_field => [ "message", "content", "source", "timestamp", "filename", "offset", "input_type", "beat" ]
  }
}

output {
  stdout { codec => rubydebug }

  elasticsearch {
    hosts => [ "es1:9200" ]
#	user => "elastic"
#	password => "changeme"
    document_type => "traxis_item"
    codec => json
  }

#  file { 
#    path => "/output/%{[@metadata][filename]}.json"
#    codec => json
#  }
}
